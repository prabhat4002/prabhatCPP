#include<iostream>
using namespace std;
int partition(int arr[], int high, int low){
    int pivot=arr[high];
    int i=low-1;
    
    for(int j=low;j<=high-1;j++){
        if(arr[j]<pivot){
            i++;
            swap(arr[i],arr[j]);
        }
    }
    swap(arr[i+1],arr[high]);
    return (i+1);
}
void quicksort(int arr[],int high,int low){
    if(low<high){
        int pi=partition(arr,high,low);
        quicksort(arr,low,pi-1);
        quicksort(arr,pi+1,high);
    }
}
int main(){
    int n;
    cout<<"enter the number of elements: ";
    cin>>n;
    int arr[n];
    cout<<endl<<"enter the elements: ";
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<"original elements of the array: ";
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl<<endl;
    quicksort(arr,n-1,0);
    cout<<"sorted elements: ";
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    return 0;
}

//first element
int partitionFirst(int arr[], int low, int high) {
    int pivot = arr[low]; // Choose the first element as the pivot
    int i = low + 1;

    for (int j = low + 1; j <= high; j++) {
        if (arr[j] < pivot) {
            std::swap(arr[i], arr[j]);
            i++;
        }
    }
    std::swap(arr[low], arr[i - 1]);
    return (i - 1);
}

//second last
int partitionSecondLast(int arr[], int low, int high) {
    int pivot = arr[high - 1]; // Choose the second-to-last element as the pivot
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            std::swap(arr[i], arr[j]);
        }
    }
    std::swap(arr[i + 1], arr[high - 1]);
    return (i + 1);
}
